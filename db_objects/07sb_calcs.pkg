/*   run as sandbar user */

CREATE OR REPLACE package body SANDBAR.sb_calcs is
function f_elev (p_site_id in number, p_ds in number) return number is
p_elev number;
p_elev_round number;

begin
select case when p_ds = 0 then -9 else
S.STAGE_DISCHARGE_COEFF_A + S.STAGE_DISCHARGE_COEFF_B * p_ds + S.STAGE_DISCHARGE_COEFF_C * power(p_ds,2) end into p_elev
from sites s where S.ID = p_site_id;

p_elev_round := round(p_elev,2);

return p_elev_round;
end;


FUNCTION f_get_area_vol_tf (p_site_id in number, p_ds_min IN NUMBER, p_ds_max in number) RETURN t_av_tab iS
  l_tab  t_av_tab := t_av_tab();
  v_min_elev number;
  v_max_elev number;
  v_8000_elev number;
  uncert_meters_low number;
  uncert_meters_high number;
 
BEGIN

uncert_meters_low := 0.04;
uncert_meters_high :=  .12;

v_min_elev := f_elev(p_site_id, p_ds_min);
v_max_elev := f_elev(p_site_id, p_ds_max);  
v_8000_elev := f_elev(p_site_id, 8000);

  FOR i IN  (with area_volume_calc_max as (select
                av.site_id,
                ss.sandbar_name,
                ss.id sandbar_id,
                av.calc_date,
                av.calc_type,
                volume_amt,
                plane_height,
                area_2d_amt,
                area_3d_amt,
                prev_plane_height,
                next_plane_height,
                max(plane_height) over (partition by av.site_id, sandbar_id, calc_type, calc_date) max_plane_height,
                min(plane_height) over (partition by av.site_id, sandbar_id, calc_type, calc_date) min_plane_height
                from area_volume_calc av , site_sandbar_rel ss
                where av.sandbar_id = ss.id(+) and
                av.site_id = p_site_id) ,
            interp_min_val as (
                select distinct * from 
                (select avc.site_id,
                avc.sandbar_name, 
                avc.calc_type, 
                avc.calc_date, 
                ((case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end-avc.plane_height) * (lead(avc.area_2d_amt , 1) over (partition by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_2d_amt)/(case when avc.next_plane_height-avc.plane_height = 0 then 1 else avc.next_plane_height-avc.plane_height end)) + avc.area_2d_amt 
                interp_area2d,
                ((case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end-avc.plane_height) * (lead(avc.area_3d_amt, 1) over (partition by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_3d_amt)/(case when avc.next_plane_height-avc.plane_height = 0 then 1 else avc.next_plane_height-avc.plane_height end)) + avc.area_3d_amt 
                interp_area3d,
                ((case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end-avc.plane_height) * (lead(avc.volume_amt, 1) over (partition by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height)-avc.volume_amt)/(case when avc.next_plane_height-avc.plane_height = 0 then 1 else avc.next_plane_height-avc.plane_height end)) + avc.volume_amt 
                interp_volume
                    from area_volume_calc_max avc, surveys s
                    where avc.site_id = p_site_id 
                        and avc.site_id = s.site_id
                        and avc.calc_date = s.survey_date
                        and nvl(avc.sandbar_id,-9) = nvl(s.sandbar_id,-9)
                        and avc.calc_type = s.calc_type
                        and s.discharge <= p_ds_min
                        and (case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end between avc.prev_plane_height and avc.next_plane_height)
                        order by sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height) where interp_area2d is not null),
            interp_max_val as (
                select distinct * from 
                (select avc.site_id,
                avc.sandbar_name, 
                avc.calc_type, 
                avc.calc_date, 
                case when v_max_elev > max_plane_height then 0 else
                    ((v_max_elev-avc.plane_height) * (lead(avc.area_2d_amt , 1) over (partition by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_2d_amt)/(case when avc.next_plane_height-avc.plane_height = 0 then 1 else avc.next_plane_height-avc.plane_height end)) + avc.area_2d_amt 
                end interp_area2d,
                case when v_max_elev > max_plane_height then 0 else
                    ((v_max_elev-avc.plane_height) * (lead(avc.area_3d_amt, 1) over (partition by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_3d_amt)/(case when avc.next_plane_height-avc.plane_height = 0 then 1 else avc.next_plane_height-avc.plane_height end)) + avc.area_3d_amt 
                end interp_area3d,
                case when v_max_elev > max_plane_height then 0 else
                    ((v_max_elev-avc.plane_height) * (lead(avc.volume_amt, 1) over (partition by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height)-avc.volume_amt)/(case when avc.next_plane_height-avc.plane_height = 0 then 1 else avc.next_plane_height-avc.plane_height end)) + avc.volume_amt 
                end interp_volume
                    from area_volume_calc_max avc
                    where avc.site_id = p_site_id 
                    and (v_max_elev between avc.prev_plane_height and avc.next_plane_height or v_max_elev >  max_plane_height) 
                    order by sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height) where interp_area2d is not null),
            interp_8000_val as (
                select distinct * from 
                (select avc.site_id,
                avc.sandbar_name, 
                avc.calc_type, 
                avc.calc_date, 
                ((v_8000_elev-avc.plane_height) * (lead(avc.area_2d_amt , 1) over (partition by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_2d_amt)/(case when avc.next_plane_height-avc.plane_height = 0 then 1 else avc.next_plane_height-avc.plane_height end)) + avc.area_2d_amt interp_8k_area2d
                    from area_volume_calc_max avc, surveys s 
                    where avc.site_id = p_site_id
                    and avc.site_id = s.site_id
                    and avc.calc_date = s.survey_date
                    and nvl(avc.sandbar_id,-9) = nvl(s.sandbar_id,-9)
                    and avc.calc_type = s.calc_type
                    and s.discharge <= p_ds_min
                    and  v_8000_elev between avc.prev_plane_height and avc.next_plane_height 
                    order by sandbar_name, avc.calc_type, avc.calc_date, avc.plane_height) where interp_8k_area2d is not null),
            avc2 as
                (select distinct avc.site_id, 
                sandbar_name, 
                avc.calc_type, 
                calc_date 
                    from area_volume_calc_max avc, surveys s
                    where avc.site_id = p_site_id
                    and avc.site_id = s.site_id
                    and avc.calc_date = s.survey_date
                    and nvl(avc.sandbar_id,-9) = nvl(s.sandbar_id,-9)
                    and avc.calc_type = s.calc_type
                    and s.discharge <= p_ds_min
                    ),
           core_q as (select imin.site_id, 
                imin.sandbar_name, 
                imin.calc_type, 
                imin.calc_date, 
                imin.interp_area2d - imax.interp_area2d interp_area2d, 
                imin.interp_area3d - imax.interp_area3d interp_area3d, 
                imin.interp_volume - imax.interp_volume  interp_volume,
                case when p_ds_min >= 8000 then 
                   (imin.interp_area2d - imax.interp_area2d) * uncert_meters_low
                   when p_ds_max <= 8000 then
                   (imin.interp_area2d - imax.interp_area2d) * uncert_meters_high
                   when 8000 > p_ds_min and 8000 < p_ds_max then
                   ((imin.interp_area2d - nvl(i8k.interp_8k_area2d,0)) * uncert_meters_high) + ((nvl(i8k.interp_8k_area2d,0) - imax.interp_area2d ) * uncert_meters_low)
                   end error_meters
                    from interp_min_val imin, interp_max_val imax, interp_8000_val i8k
                    where imin.site_id = imax.site_id
                    and imin.site_id = i8k.site_id(+)
                    and nvl(imin.sandbar_name,'-9') = nvl(i8k.sandbar_name(+),'-9')
                    and nvl(imin.sandbar_name,'-9') = nvl(imax.sandbar_name,'-9')
                    and imin.calc_type = imax.calc_type
                    and imin.calc_type = i8k.calc_type(+)
                    and imin.calc_date = imax.calc_date
                    and imin.calc_date = i8k.calc_date(+)
                union
                select site_id, sandbar_name, calc_type, calc_date, null, null, null, null from avc2
                minus
                select imin.site_id, imin.sandbar_name, imin.calc_type, imin.calc_date, null, null, null, null 
                    from interp_min_val imin, interp_max_val imax
                    where imin.site_id = imax.site_id
                    and nvl(imin.sandbar_name,'-9') = nvl(imax.sandbar_name,'-9')
                    and imin.calc_type = imax.calc_type
                    and imin.calc_date = imax.calc_date
                    order by site_id, sandbar_name nulls first, calc_type, calc_date)
                select site_id,
                calc_date, 
                min_elev,
                max_elev,
                max(eddy_int_area2d) eddy_int_area,
                max(eddy_s_int_area2d) eddy_s_int_area,
                max(eddy_r_int_area2d) eddy_r_int_area,
                case when not (max(eddy_s_int_area2d) is null and max(eddy_r_int_area2d) is null) then 
                    nvl(max(eddy_s_int_area2d),0) + nvl(max(eddy_r_int_area2d),0) 
                end sum_reatt_sep_area,
                max(eddy_int_volume) eddy_int_volume,
                max(eddy_s_int_volume) eddy_s_int_volume,
                max(eddy_r_int_volume) eddy_r_int_volume,
                case when not (max(eddy_s_int_volume) is null and max(eddy_r_int_volume) is null) then 
                    nvl(max(eddy_s_int_volume),0) + nvl(max(eddy_r_int_volume),0) 
                end sum_reatt_sep_vol,
                max(eddy_vol_error_low) eddy_vol_error_low,
                max(eddy_s_vol_error_low) eddy_s_vol_error_low,
                max(eddy_r_vol_error_low) eddy_r_vol_error_low,
                case when not (max(eddy_s_vol_error_low) is null and max(eddy_r_vol_error_low) is null) then
                    nvl(max(eddy_s_vol_error_low),0) + nvl(max(eddy_r_vol_error_low),0) 
                end sum_reatt_sep_vel, 
                max(eddy_vol_error_high) eddy_vol_error_high,
                max(eddy_s_vol_error_high) eddy_s_vol_error_high,
                max(eddy_r_vol_error_high) eddy_r_vol_error_high,
                case when not (max(eddy_s_vol_error_high) is null and max(eddy_r_vol_error_high) is null) then
                    nvl(max(eddy_s_vol_error_high),0) + nvl(max(eddy_r_vol_error_high),0) 
                end sum_reatt_sep_veh, 
                max(chan_vol_error_low)||';'||max(chan_int_volume)||';'||max(chan_vol_error_high) dy_chan_int_vol,
                max(eddy_vol_error_low)||';'||max(eddy_int_volume)||';'|| max(eddy_vol_error_high) dy_eddy_int_vol,
                max(eddy_s_vol_error_low)||';'||max(eddy_s_int_volume)||';'||max(eddy_s_vol_error_high) dy_eddy_s_vol,
                max(eddy_r_vol_error_low)||';'||max(eddy_r_int_volume)||';'||max(eddy_r_vol_error_high) dy_eddy_r_vol,
                case when not (max(eddy_s_vol_error_low) is null and max(eddy_r_vol_error_low) is null) then
                    nvl(max(eddy_s_vol_error_low),0) + nvl(max(eddy_r_vol_error_low),0) 
                end||';'||case when not (max(eddy_s_int_volume) is null and max(eddy_r_int_volume) is null) then 
                    nvl(max(eddy_s_int_volume),0) + nvl(max(eddy_r_int_volume),0) 
                end||';'||case when not (max(eddy_s_vol_error_high) is null and max(eddy_r_vol_error_high) is null) then
                    nvl(max(eddy_s_vol_error_high),0) + nvl(max(eddy_r_vol_error_high),0) 
                end dy_eddy_sum_vol,
                case when not (max(eddy_s_vol_error_low) is null and max(eddy_r_vol_error_low) is null ) then 
                    max(chan_vol_error_low) + nvl(max(eddy_r_vol_error_low),0) + nvl(max(eddy_s_vol_error_low),0) 
                    else
                     max(chan_vol_error_low) + max(eddy_vol_error_low)
                     
                end||';'||case when not (max(eddy_s_int_volume) is null and max(eddy_r_int_volume) is null) then 
                    max(chan_int_volume) + nvl(max(eddy_r_int_volume),0) + nvl(max(eddy_s_int_volume),0)
                    else
                     max(chan_int_volume) + max(eddy_int_volume)
                end||';'||case when not (max(eddy_s_vol_error_high) is null and max(eddy_r_vol_error_high) is null ) then 
                    max(chan_vol_error_high) + nvl(max(eddy_r_vol_error_high),0) + nvl(max(eddy_s_vol_error_high),0) 
                    else
                     max(chan_vol_error_high) + max(eddy_vol_error_high)
                end dy_ts_int_vol,
                max(chan_int_area) chan_int_area,
                max(chan_int_volume) chan_int_volume,
                max(chan_vol_error_low) chan_vol_error_low,
                max(chan_vol_error_high) chan_vol_error_high, 
                case when not (max(eddy_s_int_area2d) is null and max(eddy_r_int_area2d) is null) then 
                    max(chan_int_area) + nvl(max(eddy_r_int_area2d),0) + nvl(max(eddy_s_int_area2d),0)
                    else
                    max(chan_int_area) + max(eddy_int_area2d)       
                end ts_int_area,
                case when not (max(eddy_s_int_volume) is null and max(eddy_r_int_volume) is null) then 
                    max(chan_int_volume) + nvl(max(eddy_r_int_volume),0) + nvl(max(eddy_s_int_volume),0)
                    else
                     max(chan_int_volume) + max(eddy_int_volume)
                end ts_int_volume ,
                case when not (max(eddy_s_vol_error_low) is null and max(eddy_r_vol_error_low) is null ) then 
                    max(chan_vol_error_low) + nvl(max(eddy_r_vol_error_low),0) + nvl(max(eddy_s_vol_error_low),0) 
                    else
                     max(chan_vol_error_low) + max(eddy_vol_error_low)
                     
                end ts_vol_error_low,
                case when not (max(eddy_s_vol_error_high) is null and max(eddy_r_vol_error_high) is null ) then 
                    max(chan_vol_error_high) + nvl(max(eddy_r_vol_error_high),0) + nvl(max(eddy_s_vol_error_high),0) 
                    else
                     max(chan_vol_error_high) + max(eddy_vol_error_high)
                     
                end ts_vol_error_high
                from (
                select site_id, 
                calc_date, 
                v_min_elev min_elev,
                v_max_elev max_elev,
                case when calc_type = 'eddy' and sandbar_name is null then
                    case interp_area2d when 0 then null else interp_area2d end end eddy_int_area2d,
                case when calc_type = 'eddy' and sandbar_name = 'sep' then
                    case interp_area2d when 0 then null else interp_area2d end end eddy_s_int_area2d,
                case when calc_type = 'eddy' and sandbar_name = 'reatt' then
                    case interp_area2d when 0 then null else interp_area2d end end eddy_r_int_area2d,
                case when calc_type = 'eddy' and sandbar_name is null then
                    case interp_volume when 0 then null else interp_volume end end eddy_int_volume,
                case when calc_type = 'eddy' and sandbar_name = 'sep' then
                    case interp_volume when 0 then null else interp_volume end end eddy_s_int_volume,
                case when calc_type = 'eddy' and sandbar_name = 'reatt' then
                    case interp_volume when 0 then null else interp_volume end end eddy_r_int_volume,
                case when calc_type = 'eddy' and sandbar_name is null then
                    case (interp_volume - error_meters) when 0 then null else interp_volume - error_meters end end  eddy_vol_error_low,
                case when calc_type = 'eddy' and sandbar_name = 'sep' then
                    case (interp_volume - error_meters) when 0 then null else interp_volume - error_meters end end  eddy_s_vol_error_low,
                case when calc_type = 'eddy' and sandbar_name = 'reatt' then
                    case (interp_volume - error_meters) when 0 then null else interp_volume - error_meters end end  eddy_r_vol_error_low,
                case when calc_type = 'eddy' and sandbar_name is null then
                    case (interp_volume + error_meters) when 0 then null else interp_volume + error_meters end end eddy_vol_error_high,
                case when calc_type = 'eddy' and sandbar_name = 'sep' then
                    case (interp_volume + error_meters) when 0 then null else interp_volume + error_meters end end eddy_s_vol_error_high,
                case when calc_type = 'eddy' and sandbar_name = 'reatt' then
                    case (interp_volume + error_meters) when 0 then null else interp_volume + error_meters end end eddy_r_vol_error_high,
                case when calc_type = 'chan' then
                    case interp_area2d when 0 then null else interp_area2d end end chan_int_area, 
                case when calc_type = 'chan' then
                    case interp_volume when 0 then null else interp_volume end end chan_int_volume,
                case when calc_type = 'chan' then
                    case (interp_volume - error_meters) when 0 then null else interp_volume - error_meters end end  chan_vol_error_low,
                case when calc_type = 'chan' then
                    case (interp_volume + error_meters) when 0 then null else interp_volume + error_meters end end chan_vol_error_high
                         from
                core_q
                order by site_id, calc_date, min_elev)
                group by site_id,
                calc_date, 
                min_elev,
                max_elev
                order by site_id, calc_date, min_elev
       ) LOOP
    l_tab.extend;
    l_tab(l_tab.last) := t_av_row(i.site_id  
  ,i.calc_date
  ,i.min_elev 
  ,i.max_elev 
  ,i.eddy_int_area  
  ,i.eddy_s_int_area 
  ,i.eddy_r_int_area 
  ,i.sum_reatt_sep_area 
  ,i.eddy_int_volume 
  ,i.eddy_s_int_volume 
  ,i.eddy_r_int_volume 
  ,i.sum_reatt_sep_vol 
  ,i.eddy_vol_error_low 
  ,i.eddy_s_vol_error_low 
  ,i.eddy_r_vol_error_low 
  ,i.sum_reatt_sep_vel 
  ,i.eddy_vol_error_high 
  ,i.eddy_s_vol_error_high 
  ,i.eddy_r_vol_error_high 
  ,i.sum_reatt_sep_veh 
  ,i.dy_chan_int_vol
  ,i.dy_eddy_int_vol
  ,i.dy_eddy_s_vol
  ,i.dy_eddy_r_vol
  ,i.dy_eddy_sum_vol
  ,i.dy_ts_int_vol
  ,i.chan_int_area 
  ,i.chan_int_volume 
  ,i.chan_vol_error_low 
  ,i.chan_vol_error_high 
  ,i.ts_int_area 
  ,i.ts_int_volume 
  ,i.ts_vol_error_low 
  ,i.ts_vol_error_high);
  END LOOP;

  RETURN l_tab;
END;

end;
/