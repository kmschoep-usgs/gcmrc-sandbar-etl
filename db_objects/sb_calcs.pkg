CREATE OR REPLACE package body SANDBAR.sb_calcs is
function f_elev (p_site_id in number, p_ds in number) return number is
p_elev number;

begin
select case when p_ds = 0 then -9 else
S.STAGE_DISCHARGE_COEFF_A + S.STAGE_DISCHARGE_COEFF_B * p_ds + S.STAGE_DISCHARGE_COEFF_C * power(p_ds,2) end into p_elev
from sites s where S.ID = p_site_id;

return p_elev;
end;

FUNCTION f_get_area_vol_tf (p_site_id in number, p_ds_min IN NUMBER, p_ds_max in number) RETURN t_av_tab iS
  l_tab  t_av_tab := t_av_tab();
  v_min_elev number;
  v_max_elev number;
  v_8000_elev number;
  uncert_meters_low number;
  uncert_meters_high number;
 
BEGIN

uncert_meters_low := 0.04;
uncert_meters_high :=  .12;

v_min_elev := f_elev(p_site_id, p_ds_min);
v_max_elev := f_elev(p_site_id, p_ds_max);  
v_8000_elev := f_elev(p_site_id, 8000);

  FOR i IN  (select site_id, 
                sandbar_id, 
                calc_type, 
                calc_date, 
                v_min_elev min_elev,
                v_max_elev max_elev,
                case interp_area2d when 0 then null else interp_area2d end interp_area2d,
                case interp_area3d when 0 then null else interp_area3d end interp_area3d, 
                case interp_volume when 0 then null else interp_volume end interp_volume,
                case (interp_volume - error_meters) when 0 then null else interp_volume - error_meters end vol_error_low,
                case (interp_volume + error_meters) when 0 then null else interp_volume + error_meters end vol_error_high from
            (with area_volume_calc_max as (select
                site_id,
                sandbar_id,
                calc_date,
                volume_amt,
                calc_type,
                plane_height,
                area_2d_amt,
                area_3d_amt,
                prev_plane_height,
                next_plane_height,
                max(plane_height) over (partition by site_id, sandbar_id, calc_type, calc_date) max_plane_height,
                min(plane_height) over (partition by site_id, sandbar_id, calc_type, calc_date) min_plane_height
                --max(plane_height) over (partition by site_id) max_plane_height
                from area_volume_calc 
                where site_id = p_site_id) ,
            interp_min_val as (
                select distinct * from 
                (select avc.site_id,
                avc.sandbar_id, 
                avc.calc_type, 
                avc.calc_date, 
                ((case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end-avc.plane_height) * (lead(avc.area_2d_amt , 1) over (partition by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_2d_amt)/(avc.next_plane_height-avc.plane_height)) + avc.area_2d_amt 
                interp_area2d,
                ((case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end-avc.plane_height) * (lead(avc.area_3d_amt, 1) over (partition by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_3d_amt)/(avc.next_plane_height-avc.plane_height)) + avc.area_3d_amt 
                interp_area3d,
                ((case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end-avc.plane_height) * (lead(avc.volume_amt, 1) over (partition by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height)-avc.volume_amt)/(avc.next_plane_height-avc.plane_height)) + avc.volume_amt 
                interp_volume
                    from area_volume_calc_max avc where site_id = p_site_id
                    and (case when v_min_elev = -9 then min_plane_height else to_number(v_min_elev) end between avc.prev_plane_height and avc.next_plane_height)
                    --and avc.prev_plane_height != 0
                    order by sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height) where interp_area2d is not null),
            interp_max_val as (
                select distinct * from 
                (select avc.site_id,
                avc.sandbar_id, 
                avc.calc_type, 
                avc.calc_date, 
                case when v_max_elev > max_plane_height then 0 else
                    ((v_max_elev-avc.plane_height) * (lead(avc.area_2d_amt , 1) over (partition by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_2d_amt)/(avc.next_plane_height-avc.plane_height)) + avc.area_2d_amt 
                end interp_area2d,
                case when v_max_elev > max_plane_height then 0 else
                    ((v_max_elev-avc.plane_height) * (lead(avc.area_3d_amt, 1) over (partition by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_3d_amt)/(avc.next_plane_height-avc.plane_height)) + avc.area_3d_amt 
                end interp_area3d,
                case when v_max_elev > max_plane_height then 0 else
                    ((v_max_elev-avc.plane_height) * (lead(avc.volume_amt, 1) over (partition by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height)-avc.volume_amt)/(avc.next_plane_height-avc.plane_height)) + avc.volume_amt 
                end interp_volume
                    from area_volume_calc_max avc where site_id = p_site_id 
                    and (v_max_elev between avc.prev_plane_height and avc.next_plane_height or v_max_elev >  max_plane_height) 
                    --and avc.prev_plane_height != 0
                    order by sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height) where interp_area2d is not null),
            interp_8000_val as (
                select * from 
                (select avc.site_id,
                avc.sandbar_id, 
                avc.calc_type, 
                avc.calc_date, 
                ((v_8000_elev-avc.plane_height) * (lead(avc.area_2d_amt , 1) over (partition by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date order by avc.site_id, avc.sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height)-avc.area_2d_amt)/(avc.next_plane_height-avc.plane_height)) + avc.area_2d_amt interp_8k_area2d
                    from area_volume_calc_max avc where site_id = p_site_id
                    and  v_8000_elev between avc.prev_plane_height and avc.next_plane_height 
                    --and avc.prev_plane_height != 0
                    order by sandbar_id, avc.calc_type, avc.calc_date, avc.plane_height) where interp_8k_area2d is not null),
            avc2 as
                (select distinct site_id, 
                sandbar_id, 
                calc_type, 
                calc_date 
                    from area_volume_calc_max where site_id = p_site_id)
            select imin.site_id, 
                imin.sandbar_id, 
                imin.calc_type, 
                imin.calc_date, 
                imin.interp_area2d - imax.interp_area2d interp_area2d, 
                imin.interp_area3d - imax.interp_area3d interp_area3d, 
                imin.interp_volume - imax.interp_volume  interp_volume,
                case when p_ds_min >= 8000 then 
                   (imin.interp_area2d - imax.interp_area2d) * uncert_meters_low
                   when p_ds_max <= 8000 then
                   (imin.interp_area2d - imax.interp_area2d) * uncert_meters_high
                   when 8000 > p_ds_min and 8000 < p_ds_max then
                   ((imin.interp_area2d - nvl(i8k.interp_8k_area2d,0)) * uncert_meters_high) + ((nvl(i8k.interp_8k_area2d,0) - imax.interp_area2d ) * uncert_meters_low)
                   end error_meters
                    from interp_min_val imin, interp_max_val imax, interp_8000_val i8k
                    where imin.site_id = imax.site_id
                    and imin.site_id = i8k.site_id(+)
                    and nvl(imin.sandbar_id,-9) = nvl(i8k.sandbar_id(+),-9)
                    and nvl(imin.sandbar_id,-9) = nvl(imax.sandbar_id,-9)
                    and imin.calc_type = imax.calc_type
                    and imin.calc_type = i8k.calc_type(+)
                    and imin.calc_date = imax.calc_date
                    and imin.calc_date = i8k.calc_date(+)
                union
                select site_id, sandbar_id, calc_type, calc_date, null, null, null, null from avc2
                minus
                select imin.site_id, imin.sandbar_id, imin.calc_type, imin.calc_date, null, null, null, null 
                    from interp_min_val imin, interp_max_val imax
                    where imin.site_id = imax.site_id
                    and nvl(imin.sandbar_id,-9) = nvl(imax.sandbar_id,-9)
                    and imin.calc_type = imax.calc_type
                    and imin.calc_date = imax.calc_date
                    order by site_id, sandbar_id nulls first, calc_type, calc_date
       )
       ) LOOP
    l_tab.extend;
    l_tab(l_tab.last) := t_av_row(i.site_id, i.sandbar_id, i.calc_type, i.calc_date, i.min_elev, i.max_elev, i.interp_area2d, i.interp_area3d, i.interp_volume, i.vol_error_low, i.vol_error_high);
  END LOOP;

  RETURN l_tab;
END;

end;
/